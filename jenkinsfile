pipeline {
    agent any
    environment {
        JAVA_HOME = '/usr/lib/jvm/java-8-openjdk'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        IMAGE_NAME = 'naveenlakshmanan/springbootapp'
        IMAGE_TAG = "${GIT_COMMIT}"
    }
    stages {
        stage('Verify JDK 8') {
            steps {
                script {
                    def jdkInstalled = sh(script: 'java -version 2>&1 | grep "1.8"', returnStatus: true) == 0
                    if (jdkInstalled) {
                        echo 'JDK 8 is already installed.'
                    } else {
                        echo 'JDK 8 is not installed. Installing...'
                        sh '''
                            sudo apt update
                            sudo apt install -y openjdk-8-jdk
                        '''
                    }
                }
            }
        }
        stage('Check JDK Version') {
            steps {
                sh 'java -version'
            }
        }
        stage('Code Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',branches: [[name: '*/master']],extensions: [],userRemoteConfigs: [[credentialsId: 'GitHubCreds',url: 'https://github.com/Featuremasters/Kubernetes-jenkins.git']]])
            }
        }
        stage('Build Automation'){
		sh """
			ls -lart
			mvn clean install
			ls -lart target
	
		"""
	}
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh '''
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    '''
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    echo 'Pushing Docker image to repository...'
                    sh '''
                        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-file', variable: 'KUBECONFIG')]) {
                    script {
                        echo 'Deploying to Kubernetes...'
                        sh '''
                            export KUBECONFIG=${KUBECONFIG}
                            kubectl set image deployment/your-deployment-name your-container-name=${IMAGE_NAME}:${IMAGE_TAG}
                            kubectl rollout status deployment/your-deployment-name'''
                    }
                }
            }
        }
    }
